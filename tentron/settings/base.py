"""
Django settings for tentron project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import importlib
import os

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)
env = os.environ.copy()

# Basic settings
if "DEBUG" in env:
    DEBUG = env["DEBUG"]
else:
    DEBUG = False

if "SECRET_KEY" in env:
    SECRET_KEY = env["SECRET_KEY"]

ALLOWED_HOSTS = ["*"]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.settings",
    "wagtail.embeds",
    "wagtail.sites",
    "users",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "tentron.apps.CustomImagesAppConfig",
    # "wagtail.images",
    "wagtail.search",
    "dashboard",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "taggit",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "wagtail.contrib.modeladmin",
    "home",
    "search",
    "core",
    "organization",
    "organization_menu",
    "wagtailmenus",
    "grapejs",
    # "wagtail_localize",
    # "wagtail_localize.locales",
    "dbbackup",
    "wagtailmodelchooser",
    "mptt",
    "message",
    "django.contrib.sitemaps",
    "theme",
    "wagtail.contrib.table_block",
    "wagtail.contrib.typed_table_block",
]


MIDDLEWARE = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "organization.dynamic_csrf_middleware.DynamicCSRFMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sites.middleware.CurrentSiteMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    "organization.middleware.ExtendedSiteMiddleware",
]

ROOT_URLCONF = "tentron.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtailmenus.context_processors.wagtailmenus",
                "django.template.context_processors.i18n",
                "wagtail.contrib.settings.context_processors.settings",
            ],
        },
    },
]

WSGI_APPLICATION = "tentron.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env["PG_DATABASE"],
        "USER": env["PG_USER"],
        "PASSWORD": env["PG_PASSWORD"],
        "HOST": env["PG_HOST"],
        "PORT": env["PG_PORT"],
    }
}
DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
DBBACKUP_STORAGE_OPTIONS = {"location": "/home/tentron/DBbackup/"}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# WAGTAIL_I18N_ENABLED = True

# WAGTAIL_CONTENT_LANGUAGES = LANGUAGES = [
#     ("en", "English"),
#     ("fr", "French"),
#     ("es", "Spanish"),
# ]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, "static"),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/4.1/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Wagtail settings

WAGTAIL_SITE_NAME = "Tentron"

# Search
# https://docs.wagtail.org/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
WAGTAILADMIN_BASE_URL = "http://example.com"
WAGTAILMENUS_MAIN_MENU_ITEMS_RELATED_NAME = "organization_menu_items"
WAGTAILMENUS_MAIN_MENU_MODEL = "organization_menu.OrganizationMainMenu"
WAGTAILMENUS_FLAT_MENU_MODEL = "organization_menu.OrganizationFlatMenu"
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"
AUTH_USER_MODEL = "users.User"

# Custom authentication backends
AUTHENTICATION_BACKENDS = ["tentron.backends.DomainBasedModelBackend"]

WAGTAILEMBEDS_RESPONSIVE_HTML = True
# Disable commenting
WAGTAILADMIN_COMMENTS_ENABLED = False
WAGTAIL_ALLOW_UNICODE_SLUGS = False
WAGTAIL_AUTO_UPDATE_PREVIEW = False
WAGTAIL_PASSWORD_RESET_ENABLED = True
WAGTAIL_GRAVATAR_PROVIDER_URL = "//www.gravatar.com/avatar"

WAGTAILADMIN_PERMITTED_LANGUAGES = [("en", "English"), ("zh-hans", "简体中文")]

WAGTAIL_ENABLE_UPDATE_CHECK = False
WAGTAIL_ENABLE_WHATS_NEW_BANNER = False
TAGGIT_CASE_INSENSITIVE = False
TAG_LIMIT = 5
WAGTAILIMAGES_EXTENSIONS = ["gif", "jpg", "jpeg", "png", "webp", "svg"]

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

if "EMAIL_HOST" in env:
    EMAIL_HOST = env["EMAIL_HOST"]
if "EMAIL_PORT" in env:
    try:
        EMAIL_PORT = int(env["EMAIL_PORT"])
    except ValueError:
        pass

if "EMAIL_HOST_USER" in env:
    EMAIL_HOST_USER = env["EMAIL_HOST_USER"]

if "EMAIL_HOST_PASSWORD" in env:
    EMAIL_HOST_PASSWORD = env["EMAIL_HOST_PASSWORD"]

EMAIL_USE_TLS = False

EMAIL_USE_SSL = True
EMAIL_TIMEOUT = 120

if "EMAIL_SUBJECT_PREFIX" in env:
    EMAIL_SUBJECT_PREFIX = env["EMAIL_SUBJECT_PREFIX"]
SERVER_EMAIL = "info@tentrons.com"
DEFAULT_FROM_EMAIL = "Tentrons <info@tentrons.com>"
# if "SERVER_EMAIL" in env:
#     SERVER_EMAIL = DEFAULT_FROM_EMAIL = env["SERVER_EMAIL"]

ADMINS = [("Admin", "sue@sufob.com")]
MANAGERS = ADMINS
# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "/var/log/gunicorn/tentron_errors.log",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 50,  # keep 5 backup logs
            "formatter": "verbose",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "include_html": True,
        },
        "celery": {
            "level": "DEBUG",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": "/var/log/celery/celery.log",
            "maxBytes": 1024 * 1024 * 5,  # 5 MB
            "backupCount": 50,  # keep 5 backup logs
            "formatter": "verbose",
        },
    },
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s][%(process)d][%(levelname)s][%(name)s] %(message)s"
        },
    },
    "loggers": {
        "tentron": {
            "handlers": ["console", "file", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        },
        "wagtail": {
            "handlers": ["console", "file", "mail_admins"],
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console", "file", "mail_admins"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["console", "file", "mail_admins"],
            "level": "WARNING",
            "propagate": False,
        },
        "celery": {
            "handlers": ["celery"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# # Security configuration
# # https://docs.djangoproject.com/en/stable/ref/middleware/#module-django.middleware.security

# # Force HTTPS redirect (enabled by default!)
# # https://docs.djangoproject.com/en/stable/ref/settings/#secure-ssl-redirect
# SECURE_SSL_REDIRECT = True

# # This will allow the cache to swallow the fact that the website is behind TLS
# # and inform the Django using "X-Forwarded-Proto" HTTP header.
# # https://docs.djangoproject.com/en/stable/ref/settings/#secure-proxy-ssl-header
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# # This is a setting activating the HSTS header. This will enforce the visitors to use
# # HTTPS for an amount of time specified in the header. Since we are expecting our apps
# # to run via TLS by default, this header is activated by default.
# # The header can be deactivated by setting this setting to 0, as it is done in the
# # dev and testing settings.
# # https://docs.djangoproject.com/en/stable/ref/settings/#secure-hsts-seconds
# DEFAULT_HSTS_SECONDS = 30 * 24 * 60 * 60  # 30 days
# SECURE_HSTS_SECONDS = DEFAULT_HSTS_SECONDS
# if "SECURE_HSTS_SECONDS" in env:
#     try:
#         SECURE_HSTS_SECONDS = int(env["SECURE_HSTS_SECONDS"])
#     except ValueError:
#         pass

# # We don't enforce HSTS on subdomains as anything at subdomains is likely outside our control.
# # https://docs.djangoproject.com/en/3.2/ref/settings/#secure-hsts-include-subdomains
# SECURE_HSTS_INCLUDE_SUBDOMAINS = False

# # https://docs.djangoproject.com/en/stable/ref/settings/#secure-browser-xss-filter
# SECURE_BROWSER_XSS_FILTER = True

# # https://docs.djangoproject.com/en/stable/ref/settings/#secure-content-type-nosniff
# SECURE_CONTENT_TYPE_NOSNIFF = True
CSRF_TRUSTED_ORIGINS = ["https://www.tentrons.com"]


WAGTAILEMBEDS_FINDERS = [{"class": "wagtail.embeds.finders.oembed"}]


CELERY_BROKER_URL = "amqp://charlie:passwordgoeshere@rabbitmq:5672//"
CELERY_RESULT_BACKEND = "rpc://"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_IGNORE_RESULT = True

SERVER_IP = env["SERVER_IP"]
